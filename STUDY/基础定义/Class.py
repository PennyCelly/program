"""
一、基本定义：
1.类：用来描述相同属性和对象的集合。定义了该集合中每个对象所共有的属性和方法。对象是类的实例
2.方法：类中定义的函数
3.类变量：在整个实例化的对象中公用的。类变量定义在类中 且 在函数体外。类变量一般不作为实例变量使用
4.实例变量：在类的声明中，属性使用变量来表示的，这种变量被称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的
5.局部变量：定义在方法中的变量，只作用于当前实例的类
6.数据成员：类变量或者实例变量用于处理类及实例对象的相关数据
7.方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
8.继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
9.实例化：创建一个类的实例，类的具体对象。
10.对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法
二、类定义
类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。
三、类对象:
类对象支持两种操作：属性引用和实例化
类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。
属性引用一样的标准语法：obj.name
"""
class Myclass:
    """一个简单的实例"""
    i = 1234
    def f(self):
        return "hello world"


# 实例化类
x = Myclass()                                     # 以上创建了一个新的类实例并将该对象赋给局部变量 x，x 为空的对象。

# 访问类的属性和方法
print("MyClass 类的属性 i 为：", x.i)
print("MyClass 类的方法 f 输出为：", x.f())


"""
类的特殊构造方法：__init__()
1.该方法会在类实例化时会自动调用
"""


# 在类实例化时自动调用
def __init__(self):
    self.data = []


# 类定义了 __init__() 方法，类的实例化操作会自动调用 __init__() 方法
x = Myclass()

# __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上
class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart


X = Complex(3, -0.45)
print(X.r, X.i)

"""
self 代表了里的实例，而非类
特点：
1.类的方法与普通的函数只有一个特别的区别：它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。
2.self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。
3.self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的
"""


class Test:
    def prt(self):
        print(self)
        print(self.__class__)


t = Test()
t.prt()


"""
类的方法
1.使用 def 关键字来定义一个方法
2.与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例
"""

# 类定义
class people:
    # 定义基本属性
    name = ''
    age = 0
    # 定义私有属性，私有属性在类外部，无法知己而进行访问
    __weight = 0

    # 定义构造方法
    def __init__(self, n, a, w):
        self.name = n
        self.age = a
        self.__weight = w

    def speak(self):
        print("%s 说：我 %d 岁。" % (self.name, self.age))


p = people('小二', 18, 30)
p.speak()


"""
继承
"""